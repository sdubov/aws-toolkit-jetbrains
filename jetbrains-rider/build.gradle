import toolkits.gradle.sdk.WriteConfig
import java.util.regex.Pattern

// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

def backendGroup = 'backend'

apply plugin: 'org.jetbrains.intellij'

//bknd sdk: 2019.2.0-eap02

dependencies {
    compile project(":jetbrains-core")
    testCompile project(path: ":jetbrains-core", configuration: 'testArtifacts')
}

intellij {
    def parentIntellijTask = project(':jetbrains-core').intellij
    version ideVersion("RD")
    pluginName parentIntellijTask.pluginName
    updateSinceUntilBuild parentIntellijTask.updateSinceUntilBuild

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    def extraPlugins = [ "rider-plugins-appender" ]
    plugins = idePlugins("RD") + extraPlugins

    // Disable downloading source to avoid issues related to Rider SDK naming that is missed in Idea
    // snapshots repository. The task is failed due to unable to find related IC sources.
    downloadSources = false
    instrumentCode = false
}

def resharperPluginPath = new File(projectDir, "ReSharper.AWS")
def buildConfiguration = ext.properties["BuildConfiguration"] ?: "Debug"

def pluginFiles = [
        "AWS.Daemon/bin/$buildConfiguration/net461/AWS.Daemon.dll",
        "AWS.Daemon/bin/$buildConfiguration/net461/AWS.Daemon.pdb",
        "AWS.Psi/bin/$buildConfiguration/net461/AWS.Psi.dll",
        "AWS.Psi/bin/$buildConfiguration/net461/AWS.Psi.pdb"
]

def getNugetPackagesPath1() {
    def sdkPath = intellij.ideaDependency.classes

    println("SDK path: $sdkPath")
    def path = new File(sdkPath, "lib/ReSharperHostSdk")

    println("NuGet packages: $path")
    if (!path.isDirectory()) throw GradleException("${path} does not exist or not a directory")

    return path
}

def getRiderSdkPackageVersion() {
    def sdkPackageName = "JetBrains.Rider.SDK"

    def regex = Pattern.compile("JetBrains\\.Rider\\.SDK\\.([\\d\\.]+.*)\\.nupkg")
    def versions = nugetPackagesPath
            .listFiles()
            .collect { file ->
                def matches = regex.matcher(file.name)
                if (matches.matches()) {
                    matches[0][1]
                } else {
                    null
                }
            }

    versions.removeAll([null])

    if (versions.size() > 1) {
        throw GradleException("Found multiple SDK packages matches name $sdkPackageName in $nugetPackagesPath")
    }

    if (versions.size() == 0) {
        throw GradleException("$sdkPackageName package is not found in $nugetPackagesPath")
    }

    def version = versions.first()
    println("$sdkPackageName version is $version")

    return version
}

def nugetConfigPath = new File(projectDir, "NuGet.Config")
def riderSdkVersionPropsPath = new File(resharperPluginPath, "RiderSdkPackageVersion.props")

def riderTargetsGroup = "jetbrains-rider"

tasks.withType(prepareSandbox.class).all {

    def files = pluginFiles.collect { "$resharperPluginPath/src/$it" }

    if (name == prepareTestingSandbox.name) {
        def testHostPath = "$resharperPluginPath/test/src/FSharp.Tests.Host/bin/$buildConfiguration/net461"
        def testHostName = "$testHostPath/JetBrains.ReSharper.Plugins.FSharp.Tests.Host"
        files = files + ["${testHostName}.dll", "${testHostName}.pdb"]
    }

    files.each {
        from(it, { into("${intellij.pluginName}/dotnet") })
    }

    into("${intellij.pluginName}/projectTemplates") {
        from("projectTemplates")
    }

    doLast {
        files.each {
            def file = new File(it)
            if (!file.exists()) throw new GradleException("File $file does not exist")
            logger.warn("$name: ${file.name} -> ${destinationDir}/${intellij.pluginName}/dotnet")
        }
    }
}

project.tasks.create("writeRiderSdkVersionProps", WriteConfig) {
    group = riderTargetsGroup
    configFile = riderSdkVersionPropsPath
    configText = """<Project>
  <PropertyGroup>
    <RiderSDKVersion>[${riderSdkVersion}]</RiderSDKVersion>
  </PropertyGroup>
</Project>
"""

    doFirst {
        riderSdkVersion = getRiderSdkPackageVersion()
    }
}

project.tasks.create("writeNuGetConfig", WriteConfig) {
    group = riderTargetsGroup
    configFile = nugetConfigPath
    configText = """<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <add key="resharper-sdk" value="${nugetPackagesPath}" />
  </packageSources>
</configuration>
"""
    doFirst {
        nugetPackagesPath = getNugetPackagesPath1()
        println("SD -- nuget packages path: ${nugetPackagesPath}")
    }
}

project.tasks.create("prepare") {
    group = riderTargetsGroup
    dependsOn writeNuGetConfig, writeRiderSdkVersionProps
    doLast {
        exec {
            executable = "dotnet"
            args = ["restore", "${resharperPluginPath}/ReSharper.AWS.sln" ]
        }
    }
}

project.tasks.create("buildReSharperPlugin") {
    group = riderTargetsGroup
    dependsOn("prepare")
    doLast {
        doFirst {
            println("SD -- ${resharperPluginPath}/ReSharper.AWS.sln")
        }

        exec {
            executable = "msbuild"
            args = [ "${resharperPluginPath}/ReSharper.AWS.sln" ]
        }
    }
}

test {
    useTestNG()
    ignoreFailures = true
}

runIde {
    systemProperty("aws.toolkits.enableTelemetry", false)
}

jar {
    archiveBaseName = 'aws-intellij-toolkit-rider'
}

defaultTasks("prepare")
